// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// 种马
model Seed {
  id String @id @default(auto()) @map("_id") @db.ObjectId
}

model Character {
  name   String
  gwid   Int              @unique
  skills CharacterSkill[]
  events CharacterEvent[]
}

model Skill {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  CharacterSkill CharacterSkill[]
}

model CharacterSkill {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  skill       Skill     @relation(fields: [skillId], references: [id])
  skillId     String    @db.ObjectId
  character   Character @relation(fields: [characterId], references: [id])
  characterId String    @db.ObjectId
  acquired    String
}

model Event {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  CharacterEvent CharacterEvent[]
}

model CharacterEvent {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  Event       Event     @relation(fields: [EventId], references: [id])
  EventId     String    @db.ObjectId
  character   Character @relation(fields: [characterId], references: [id])
  characterId String    @db.ObjectId
  acquired    String
}

model Support {
  id String @id @default(auto()) @map("_id") @db.ObjectId
}
